env:
  node: true

plugins:
  - '@typescript-eslint'

extends:
  - 'eslint:recommended'
  - 'plugin:@typescript-eslint/recommended'

parser: '@typescript-eslint/parser'

parserOptions:
  ecmaVersion: 11

rules:

  # Style
  indent:             [ error, tab, { SwitchCase: 1 }]
  linebreak-style:    [ error, unix ]
  quotes:             [ error, single ]
  semi:               [ error, always ]
  camelcase:          [ error ]
  no-trailing-spaces: [ error ]

  # Additional rules (possible errors)
  no-console: [ error ]

  # Additional rules (best practices)
  curly:                        [ error, all ]
  eqeqeq:                       [ error, always ]
  no-alert:                     [ error ]
  no-confusing-arrow:           [ error ]
  no-constructor-return:        [ error ]
  no-duplicate-imports:         [ error ]
  no-eval:                      [ error ]
  no-extend-native:             [ error ]
  no-floating-decimal:          [ error ]
  no-implicit-coercion:         [ error ]
  no-implied-eval:              [ error ]
  no-invalid-this:              [ error ]
  no-labels:                    [ error ]
  no-lone-blocks:               [ error ]
  no-loop-func:                 [ error ]
  no-new:                       [ error ]
  no-new-func:                  [ error ]
  no-new-wrappers:              [ error ]
  no-octal-escape:              [ error ]
  no-return-assign:             [ error, always ]
  no-script-url:                [ error ]
  no-self-compare:              [ error ]
  no-throw-literal:             [ error ]
  no-unmodified-loop-condition: [ error ]
  no-unused-expressions:        [ error ]
  no-useless-computed-key:      [ error ]
  no-useless-concat:            [ error ]
  no-useless-rename:            [ error ]
  no-useless-return:            [ error ]
  no-var:                       [ error ]
  no-warning-comments:          [ warn, { location: anywhere, terms: [ TODO ] }]
  prefer-arrow-callback:        [ error ]
  prefer-const:                 [ error ]
  prefer-regex-literals:        [ error ]
  prefer-rest-params:           [ error ]
  rest-spread-spacing:          [ error ]

  # Additional rules (typescript)
  '@typescript-eslint/no-shadow': [ error, { builtinGlobals: true }]

  # Relaxed rules
  no-constant-condition: [ error, { checkLoops: false }]

  # Relaxed rules (typescript)
  '@typescript-eslint/no-non-null-assertion': [ off ]
  '@typescript-eslint/no-namespace':          [ off ]
  '@typescript-eslint/no-empty-function':     [ error, { allow: [ private-constructors, protected-constructors ] }]
